/**
 * objectives for this branch
 * pull modules out of the task class
 */

buildscript{
	repositories{
		jcenter()
		mavenCentral()
	}
	
	dependencies{
		classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.2"
	}
}

import org.gradle.api.tasks.TaskAction
import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import groovy.json.JsonSlurper

ext{
	
	//properties
	weather_id = ""
	
	//directories
	frameworkDir = "src/gitrepos"
	modelDir = "src/model"
}


class WeatherPlugin implements Plugin<Project>{
	
	void apply( Project project ){
		//we can include apply "plugin: 'pluginName'" like this
		//project.plugins.apply( 'pluginName' )
		
		project.tasks.create( "credentials" ).configure{
			
			File readMe = project.file( "$project.modelDir/map.json" );
			String contents = readMe.getText("UTF-8")
			
			def slurper = new JsonSlurper()
			def credentials = slurper.parseText( contents )
			project.weather_id = credentials.id;
			
		}
		
		project.tasks.create('weather', WeatherTask).configure{
			dependsOn<<["credentials"]
			
			developer = "Juan Mendez"
			
			/*
			 * no longer used as we are providing from project.weather.cities
			 * cities = [
					[name:"Tehran", countryCode:"IR"],
					[name:"Guatemala", countryCode:"GT"],
					[name:"Chicago", countryCode:"US"],
					[name:"Havana", countryCode:"CU"],
					[name:"Krakow", countryCode:"PL"],
					[name:"Managua", countryCode:"NI"],
					[name:"Caracas", countryCode:"VE"],
					[name:"Ho Chi Minh", countryCode:"VN"],
				]*/
		}
		
		def cities = project.container(City){ name->
			new City(name)
		}
		
		project.configure( project ){
			extensions.create( "weather", CityExtension, cities )
		}
		
		//accessing another plugin
		//project.task.getByName('pluginName').configure{}
	}
}


apply plugin: WeatherPlugin


class City{
	String name
	String countryCode
	String file
	
	City(name){
		this.name = name
	}
}

class CityExtension{
	final NamedDomainObjectContainer<City> cities
	
	CityExtension( NamedDomainObjectContainer<City> cities ){
		this.cities = cities;
	}
	
	def cities( Closure closure ){
		cities.configure( closure )
	}
}

weather{
	cities{
		tehran{
			countryCode ="IR"
			file = "tehran.json"
		}
		
		guatemala{
			countryCode= "GT"
			file = "guatemala.json"
		}
		
		chicago{
			countryCode= "us"
			file = "chicago.json"
		}
		
		havana{
			countryCode ="CU"
			file = "havana.json"
		}
	}
}


import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.JSON


class WeatherTask extends DefaultTask{
	
	def http
	def cities
	def developer
	
	WeatherTask(){
		this.http = new HTTPBuilder( 'http://api.openweathermap.org' )
	}
	
	@TaskAction
	def printCitiesWeather(){
		
		println "cities $developer wants to know about their weather"
		
		/*
		 * no longer code from member cities
		 * cities.each{ city->
			readWeather( city.name, city.countryCode)
		}*/
		
		project.weather.cities.each { city ->
			readWeather( city.name, city.countryCode)
		  }
	}
	
	
	def readWeather( city, countryCode ){
		
		http.request( GET, JSON ) {
						  uri.path = '/data/2.5/weather'
						  uri.query = [ APPID:project.weather_id, q: "$city,$countryCode", units:"Imperial" ]
						
						  response.success = { resp, json ->
							 println json
						  }
						}
						
						http.handler.'404' = { resp ->
							println "Access Issue $resp"
						  }
	}
}

task wrapper( type:Wrapper){
	gradleVersion = "3.3"
}