buildscript{
	repositories{
		jcenter()
		mavenCentral()
	}
	
	dependencies{
		classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.2"
		classpath "org.ajoberstar:grgit:1.8.0"
	}
}

import org.ajoberstar.grgit.Grgit


//this is project.extension 
ext{
	gitDir = "src/main/resources/gitrepos"
	modelDir = "src/main/resources"
}

import org.gradle.api.tasks.TaskAction
import org.gradle.api.DefaultTask


task gitRepo(type:GitrepoTask)

class GitrepoTask extends DefaultTask{

	//this is like doing first or last, but call 
	@TaskAction
	def frameworkAction(){
		project.file("$project.gitDir/material-demo").mkdirs();
		
		def asciidoctordeckjs = Grgit.clone( dir:project.file("$project.gitDir/material-demo1"),
			uri:"git@github.com:juanmendez/android-annotation-studio-demo.git" )
	}	
}

import groovy.json.JsonSlurper


ext{
	weather_id = ""	
	weather_result = ""
}


task credentials<<{
	File readMe = file( "$modelDir/map.json" );
	String contents = readMe.getText("UTF-8")
	
	def slurper = new JsonSlurper()
	def credentials = slurper.parseText( contents )
	weather_id = credentials.id;
	println "id $weather_id"
}


task weather( type:WeatherTask){
	dependsOn << credentials
}

import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.GET
import static groovyx.net.http.ContentType.JSON

class WeatherTask extends DefaultTask{
	
	def http
	
	WeatherTask(){
		this.http = new HTTPBuilder( 'http://api.openweathermap.org' )
	}
	
	
	@TaskAction
	def readWeather(){
		http.request( GET, JSON ) {
						  uri.path = '/data/2.5/weather'
						  uri.query = [ APPID:project.weather_id, q: 'Chicago', units:"Imperial" ]
						
						  response.success = { resp, json ->
						     project.weather_result = json
						  }
						}
						
						http.handler.'403' = { resp ->
							println "Access Issue $resp"
						  }
	}
}

task wrapper( type:Wrapper){
	gradleVersion = "3.3"
}